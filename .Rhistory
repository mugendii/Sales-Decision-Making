# check the working directory
getwd()
df <- read.csv("game_sales.csv", header = TRUE,sep = ",")
df
#Checking for null values
colSums(is.na(df))
summary(df)
#get the value counts for the genre
table(df$genre)
df2 <- df # Duplicate the data
df2$genre_mean <- ave(df$sales,df$genre) #Get the mean sales of the genres and save in a new column
df2
library(ggplot2)
ggplot(df2, aes(x = genre, y = genre_mean)) +
geom_bar(stat = "identity", fill = "blue", alpha = 0.7) +
labs(title = "Mean Sales by Genre",
x = NULL,
y = "Average Sales") +
theme(axis.text.x = element_blank(), axis.ticks.x = element_blank())+
facet_wrap(~ genre, scales = "free_x", labeller = label_both)
Genre <- vgs %>%
group_by (Genre) %>%
summarize(count=n()) %>%
arrange(desc(count))
Genre <- df %>%
group_by (Genre) %>%
summarize(count=n()) %>%
arrange(desc(count))
library(readr)
library(dplyr)
library(forcats)
library(dplyr)
library(ggplot2)
ggplot(
head(vgs, 10),
aes(
x=sales,
y=reorder(Name, sales),
fill=Year
)
) +
geom_bar(stat="identity") +
labs(
y="Name",
x=" Sales"
)
ggplot(
head(df, 10),
aes(
x=sales,
y=reorder(Name, sales),
fill=Year
)
) +
geom_bar(stat="identity") +
labs(
y="Name",
x=" Sales"
)
ggplot(
head(df, 10),
aes(
x=sales,
y=reorder(name, sales),
fill=Year
)
) +
geom_bar(stat="identity") +
labs(
y="Name",
x=" Sales"
)
ggplot(
head(df, 10),
aes(
x=sales,
y=reorder(name, sales),
fill=year
)
) +
geom_bar(stat="identity") +
labs(
y="Name",
x=" Sales"
)
ggplot(
head(df, 10),
aes(
x=sales,
y=reorder(name, sales),
fill=year_of_release
)
) +
geom_bar(stat="identity") +
labs(
y="Name",
x=" Sales"
)
publisher_sales <- aggregate(
sales~publisher+year_of_release,
df,
sum
)
df2 <- df # Duplicate the data
df2$genre_mean <- ave(df$sales,df$genre) #Get the mean sales of the genres and save in a new column
df2
plt.figure(figsize=(15, 10))
plt.figure(figsize=(15 10))
publisher_sales_clean <- aggregate(
sales~publisher,
df,
sum
)
publisher_sales_clean <- publisher_sales_clean[
order(publisher_sales_clean$sales, decreasing=T),
]
ggplot(
publisher_sales,
aes(
x=sales,
y=reorder(publisher, sales),
fill=Year
)
) +
geom_bar(stat="identity") +
scale_fill_continuous(low="red", high="blue") +
scale_y_discrete(limits=head(publisher_sales_clean, 10)$publisher) +
labs(
y="Platform",
x="Sales"
)
publisher_sales_clean <- aggregate(
sales~publisher,
df,
sum
)
publisher_sales_clean <- publisher_sales_clean[
order(publisher_sales_clean$sales, decreasing=T),
]
ggplot(
publisher_sales,
aes(
x=sales,
y=reorder(publisher, sales),
fill=year_of_release
)
) +
geom_bar(stat="identity") +
scale_fill_continuous(low="red", high="blue") +
scale_y_discrete(limits=head(publisher_sales_clean, 10)$publisher) +
labs(
y="Platform",
x="Sales"
)
wrap <- vgs %>%
filter (Year >=1997) %>%
filter (Year < 2017) %>%
group_by(Genre, Year) %>%
summarize(count = n())
ggplot(
df,
aes(
x=year_of_release,
)
) +
geom_histogram(
binwidth=1,
fill="green"
) +
theme_minimal()
bar_chart <- ggplot(df, aes(x = Platform, fill = "Red")) +
geom_bar() +
scale_fill_manual(values = "red") +  # Set fill color to blue
theme(axis.text.x = element_text(angle = 45, hjust = 1))  # Rotate x-axis labels for better readability
bar_chart
bar_chart <- ggplot(df, aes(x = platform, fill = "Red")) +
geom_bar() +
scale_fill_manual(values = "red") +  # Set fill color to blue
theme(axis.text.x = element_text(angle = 45, hjust = 1))  # Rotate x-axis labels for better readability
bar_chart
genre_counts <- table(df$genre)
genre_data <- as.data.frame(genre_counts)
colnames(genre_data) <- c("Genre", "Count")
# Create the pie chart
pie_chart <- ggplot(genre_data, aes(x = "", y = Count, fill = Genre)) +
geom_bar(stat = "identity") +
coord_polar("y") +  # Convert to a pie chart
theme_void()  # Remove unnecessary elements
pie_chart
publisher_sales <- aggregate(
sales~publisher+year_of_release,
df,
sum
)
ggplot(
head(df, 10),
aes(
x=sales,
y=reorder(name, sales),
fill=year_of_release
)
) +
geom_bar(stat="identity") +
labs(
y="Name",
x=" Sales"
)
library(ggplot2)
ggplot(df2, aes(x = genre, y = genre_mean)) +
geom_bar(stat = "identity", fill = "blue", alpha = 0.7) +
labs(title = "Mean Sales by Genre",
x = NULL,
y = "Average Sales") +
theme(axis.text.x = element_blank(), axis.ticks.x = element_blank())+
facet_wrap(~ genre, scales = "free_x", labeller = label_both)
# Scatter plot of Global Sales vs. Critic Score
ggplot(df, aes(x = critic_Score, y = sales)) +
geom_point() +
labs(title = " Sales vs. Critic Score",
x = "Critic Score",
y = "Sales ")
# Scatter plot of Global Sales vs. Critic Score
ggplot(df, aes(x = critic_score, y = sales)) +
geom_point() +
labs(title = " Sales vs. Critic Score",
x = "Critic Score",
y = "Sales ")
# Scatter plot of Sales vs.user Score
ggplot(df, aes(x = user_score, y = sales)) +
geom_point() +
labs(title = "Sales vs. user Score",
x = "User Score",
y = "Sales (in millions)")
# Calculate correlation matrix
correlation_matrix <- cor(df[c("sales", "critic_score", "user_score")])
# Print correlation matrix
print(correlation_matrix)
# Extract correlation coefficients for Global Sales and User Score
cor_sales_user <- correlation_matrix["sales", "user_score"]
# Print correlation coefficients
cat("Correlation between Sales and critic score:", cor_sales_critic, "\n")
# Extract correlation coefficients for Global Sales and User Score
cor_sales_user <- correlation_matrix["sales", "user_score"]
# Print correlation coefficients
cat("Correlation between Sales and critic score:", cor_sales_user, "\n")
# Extract correlation coefficients for Global Sales and Critic Score
cor_sales_critic <- correlation_matrix["Global_Sales", "Critic_Score"]
# Extract correlation coefficients for Sales and Critic Score
cor_sales_critic <- correlation_matrix["sales", "critic_score"]
cat("Correlation between Sales and User Score:", cor_sales_critic, "\n")
# Calculate correlation matrix
correlation_matrix <- cor(df[c("sales", "critic_score", "user_score")])
# Print correlation matrix
print(correlation_matrix)
# Create a heatmap to visualize the correlation
ggplot(data = melt(correlation_matrix), aes(x = Var1, y = Var2, fill = value)) +
geom_tile() +
geom_text(aes(label = round(value, 2)), vjust = 1) +
scale_fill_gradient2(low = "blue", high = "red", mid = "white", midpoint = 0, limit = c(-1, 1), space = "Lab", name="Correlation") +
theme_minimal() +
labs(title = "Correlation Heatmap",
x = "Variables",
y = "Variables")
library(reshape2)
install.packages("reshape2")
# Create a heatmap to visualize the correlation
ggplot(data = melt(correlation_matrix), aes(x = Var1, y = Var2, fill = value)) +
geom_tile() +
geom_text(aes(label = round(value, 2)), vjust = 1) +
scale_fill_gradient2(low = "blue", high = "red", mid = "white", midpoint = 0, limit = c(-1, 1), space = "Lab", name="Correlation") +
theme_minimal() +
labs(title = "Correlation Heatmap",
x = "Variables",
y = "Variables")
library(dplyr)
library(ggplot2)
# check the working directory
getwd()
df <- read.csv("game_sales.csv", header = TRUE,sep = ",")
df
#Checking for null values
colSums(is.na(df))
summary(df)
#get the value counts for the genre
table(df$genre)
genre_counts <- table(df$genre)
genre_data <- as.data.frame(genre_counts)
colnames(genre_data) <- c("Genre", "Count")
# Create the pie chart
pie_chart <- ggplot(genre_data, aes(x = "", y = Count, fill = Genre)) +
geom_bar(stat = "identity") +
coord_polar("y") +  # Convert to a pie chart
theme_void()  # Remove unnecessary elements
pie_chart
df2 <- df # Duplicate the data
df2$genre_mean <- ave(df$sales,df$genre) #Get the mean sales of the genres and save in a new column
df2
library(ggplot2)
ggplot(df2, aes(x = genre, y = genre_mean)) +
geom_bar(stat = "identity", fill = "blue", alpha = 0.7) +
labs(title = "Mean Sales by Genre",
x = NULL,
y = "Average Sales") +
theme(axis.text.x = element_blank(), axis.ticks.x = element_blank())+
facet_wrap(~ genre, scales = "free_x", labeller = label_both)
Genre <- df %>%
group_by (Genre) %>%
summarize(count=n()) %>%
arrange(desc(count))
library(reshape2)
# Create a heatmap to visualize the correlation
ggplot(data = melt(correlation_matrix), aes(x = Var1, y = Var2, fill = value)) +
geom_tile() +
geom_text(aes(label = round(value, 2)), vjust = 1) +
scale_fill_gradient2(low = "blue", high = "red", mid = "white", midpoint = 0, limit = c(-1, 1), space = "Lab", name="Correlation") +
theme_minimal() +
labs(title = "Correlation Heatmap",
x = "Variables",
y = "Variables")
#Regression analysis
# Fit a simple linear regression model
regression_model <- lm(sales ~ critic_score, data = df)
specific_critic_score <- 80
new_data <- data.frame(Critic_Score = specific_critic_score)
predicted_sales <- predict(regression_model, newdata = new_data)
#Regression analysis
# Fit a simple linear regression model
regression_model <- lm(sales ~ critic_score, data = df)
specific_critic_score <- 80
new_data <- data.frame(critic_score = specific_critic_score)
predicted_sales <- predict(regression_model, newdata = new_data)
cat("Predicted Sales for Critic Score", specific_critic_score, ":", predicted_sales, "\n")
table(df$year_of_release)
genre_counts <- table(df$platform)
genre_data <- as.data.frame(genre_counts)
colnames(genre_data) <- c("Genre", "Count")
# Create the pie chart
pie_chart <- ggplot(genre_data, aes(x = "", y = Count, fill = Genre)) +
geom_bar(stat = "identity") +
coord_polar("y") +  # Convert to a pie chart
theme_void()  # Remove unnecessary elements
pie_chart
genre_counts <- table(df$publisher)
genre_data <- as.data.frame(genre_counts)
colnames(genre_data) <- c("Genre", "Count")
# Create the pie chart
pie_chart <- ggplot(genre_data, aes(x = "", y = Count, fill = Genre)) +
geom_bar(stat = "identity") +
coord_polar("y") +  # Convert to a pie chart
theme_void()  # Remove unnecessary elements
pie_chart
# Scatter plot of Global Sales vs. Critic Score
ggplot(df, aes(x = year_of_release, y = sales)) +
geom_point() +
labs(title = " Sales vs. year",
x = "year",
y = "Sales ")
Genre <- df %>%
group_by (genre) %>%
summarize(count=n()) %>%
arrange(desc(count))
ggplot((data = Genre), aes(x = reorder(Genre, - count), y = count)) + geom_col (fill = "Blue") + labs(title = "Genre Popularity", x = "Genre") + theme(axis.text.x= element_text(size =10, angle = 90))
